[{"/Users/mcooper/Documents/GitHub/nft-minter/src/index.js":"1","/Users/mcooper/Documents/GitHub/nft-minter/src/reportWebVitals.js":"2","/Users/mcooper/Documents/GitHub/nft-minter/src/App.js":"3","/Users/mcooper/Documents/GitHub/nft-minter/src/Minter.js":"4","/Users/mcooper/Documents/GitHub/nft-minter/src/util/interact.js":"5","/Users/mcooper/Documents/GitHub/nft-minter/src/util/pinata.js":"6"},{"size":500,"mtime":1635284747000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1635284747000,"results":"9","hashOfConfig":"8"},{"size":175,"mtime":1635284747000,"results":"10","hashOfConfig":"8"},{"size":2981,"mtime":1641876618540,"results":"11","hashOfConfig":"8"},{"size":3740,"mtime":1635284747000,"results":"12","hashOfConfig":"8"},{"size":852,"mtime":1635284747000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"183jpyg",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/mcooper/Documents/GitHub/nft-minter/src/index.js",[],["28","29"],"/Users/mcooper/Documents/GitHub/nft-minter/src/reportWebVitals.js",[],"/Users/mcooper/Documents/GitHub/nft-minter/src/App.js",[],"/Users/mcooper/Documents/GitHub/nft-minter/src/Minter.js",["30","31"],"/Users/mcooper/Documents/GitHub/nft-minter/src/util/interact.js",["32","33","34","35","36","37","38"],"import { pinJSONToIPFS } from \"./pinata.js\";\nrequire(\"dotenv\").config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x4C4a07F737Bf57F6632B6CAB089B78f62385aCaE\";\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nasync function loadContract() {\n  return new web3.eth.Contract(contractABI, contractAddress);\n}\n\nexport const mintNFT = async (url, name, description) => {\n  if (url.trim() == \"\" || name.trim() == \"\" || description.trim() == \"\") {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\",\n    };\n  }\n\n  //make metadata\n  const metadata = new Object();\n  metadata.name = name;\n  metadata.image = url;\n  metadata.description = description;\n\n  const pinataResponse = await pinJSONToIPFS(metadata);\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"😢 Something went wrong while uploading your tokenURI.\",\n    };\n  }\n  const tokenURI = pinataResponse.pinataUrl;\n\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    data: window.contract.methods\n      .mintNFT(window.ethereum.selectedAddress, tokenURI)\n      .encodeABI(),\n  };\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      success: true,\n      status:\n        \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" +\n        txHash,\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message,\n    };\n  }\n};\n","/Users/mcooper/Documents/GitHub/nft-minter/src/util/pinata.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":16,"column":13,"nodeType":"45","endLine":23,"endColumn":4},{"ruleId":"46","severity":1,"message":"47","line":41,"column":11,"nodeType":"48","endLine":41,"endColumn":73},{"ruleId":"46","severity":1,"message":"47","line":34,"column":13,"nodeType":"48","endLine":34,"endColumn":75},{"ruleId":"46","severity":1,"message":"47","line":76,"column":13,"nodeType":"48","endLine":76,"endColumn":75},{"ruleId":"49","severity":1,"message":"50","line":87,"column":16,"nodeType":"51","messageId":"52","endLine":87,"endColumn":28},{"ruleId":"53","severity":1,"message":"54","line":92,"column":18,"nodeType":"55","messageId":"56","endLine":92,"endColumn":20},{"ruleId":"53","severity":1,"message":"54","line":92,"column":39,"nodeType":"55","messageId":"56","endLine":92,"endColumn":41},{"ruleId":"53","severity":1,"message":"54","line":92,"column":67,"nodeType":"55","messageId":"56","endLine":92,"endColumn":69},{"ruleId":"57","severity":1,"message":"58","line":100,"column":20,"nodeType":"59","messageId":"60","endLine":100,"endColumn":32},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-unused-vars","'loadContract' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","no-global-assign","no-unsafe-negation"]